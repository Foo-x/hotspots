#!/usr/bin/env python

import subprocess
import math
import datetime as dt
from typing import List, Tuple


def is_cwd_git_dir() -> bool:
    return (
        subprocess.run(
            ["git", "rev-parse", "--is-inside-work-tree"],
            capture_output=True,
            text=True,
        ).returncode
        == 0
    )


def ls_files() -> List[str]:
    return subprocess.run(
        ["git", "ls-files"], capture_output=True, text=True
    ).stdout.splitlines()


def commit_dates(file: str) -> List[dt.date]:
    return [
        dt.date.fromisoformat(date.replace("'", ""))
        for date in subprocess.run(
            ["git", "log", "--format='%as'", "--", file], capture_output=True, text=True
        ).stdout.splitlines()
    ]


def normalize_timestamp(date: dt.date, first_date: dt.date, today: dt.date) -> float:
    total_days: int = (today - first_date).days
    days_from_first: int = (date - first_date).days
    return days_from_first / total_days if total_days != 0 else 1


def calc_hotspot_score(normalized_timestamps: List[float]) -> float:
    return sum(
        1 / (1 + math.e ** (-12 * normalized_timestamp + 12))
        for normalized_timestamp in normalized_timestamps
    )


def calc_hotspot_score_for_file(file: str, today: dt.date) -> float:
    dates = commit_dates(file)
    first_date = dates[-1]
    normalized_timestamps = [
        normalize_timestamp(date, first_date, today) for date in dates
    ]
    return calc_hotspot_score(normalized_timestamps)


def normalize_score(score: float, min: float, max: float) -> float:
    return (score - min) / (max - min) if (max - min) != 0 else 1


def main():
    if not is_cwd_git_dir():
        return

    today: dt.date = dt.date.today()

    result: List[Tuple[str, float]] = [
        (file, calc_hotspot_score_for_file(file, today)) for file in ls_files()
    ]
    result.sort(key=lambda x: x[1], reverse=True)

    min_score = result[-1][1]
    max_score = result[0][1]
    result = [
        (file, normalize_score(score, min_score, max_score)) for file, score in result
    ]

    for file, score in result:
        print(f"{score:.4f}", " - ", file)


main()

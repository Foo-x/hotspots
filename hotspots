#!/usr/bin/env python

import argparse
import subprocess
import math
import datetime as dt
import fnmatch as fm
from typing import List, Tuple, Optional, cast

digits = 4
delimiter = " "


def is_cwd_git_dir() -> bool:
    return (
        subprocess.run(
            ["git", "rev-parse", "--is-inside-work-tree"],
            capture_output=True,
        ).returncode
        == 0
    )


def ls_files() -> List[str]:
    return subprocess.run(
        ["git", "ls-files"], capture_output=True, text=True
    ).stdout.splitlines()


def filter_files(
    files: List[str],
    include_pattern: Optional[str] = None,
    exclude_pattern: Optional[str] = None,
) -> List[str]:
    if include_pattern is None and exclude_pattern is None:
        return files

    if include_pattern is None:
        return [
            file for file in files if not fm.fnmatch(file, cast(str, exclude_pattern))
        ]

    if exclude_pattern is None:
        return fm.filter(files, include_pattern)

    return [
        file
        for file in fm.filter(files, include_pattern)
        if not fm.fnmatch(file, exclude_pattern)
    ]


def lines(file: str) -> int:
    try:
        with open(file) as f:
            return sum(1 for _ in f)
    except:
        return -1


def ls_commit_dates(file: str) -> List[dt.date]:
    return [
        dt.date.fromisoformat(date.replace("'", ""))
        for date in subprocess.run(
            ["git", "log", "--format='%as'", "--", file], capture_output=True, text=True
        ).stdout.splitlines()
    ]


def normalize_timestamp(date: dt.date, first_date: dt.date, today: dt.date) -> float:
    total_days: int = (today - first_date).days
    days_from_first: int = (date - first_date).days
    return days_from_first / total_days if total_days != 0 else 1


def calc_hotspot_score(normalized_timestamps: List[float]) -> float:
    return sum(
        1 / (1 + math.e ** (-12 * normalized_timestamp + 12))
        for normalized_timestamp in normalized_timestamps
    )


def calc_hotspot_score_for_file(file: str, today: dt.date) -> float:
    dates = ls_commit_dates(file)
    first_date = dates[-1]
    normalized_timestamps = [
        normalize_timestamp(date, first_date, today) for date in dates
    ]
    return calc_hotspot_score(normalized_timestamps)


def normalize_score(score: float, min: float, max: float) -> float:
    return round((score - min) / (max - min), digits) if (max - min) != 0 else 1


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--include",
        "-I",
        help="include only files that match glob pattern",
        metavar="GLOB",
    )
    parser.add_argument(
        "--exclude", "-E", help="exclude files that match glob pattern", metavar="GLOB"
    )
    return parser.parse_args()


def main():
    if not is_cwd_git_dir():
        return

    args = parse_args()

    today: dt.date = dt.date.today()

    files = filter_files(ls_files(), args.include, args.exclude)
    files_with_loc = [(file, lines(file)) for file in files]

    result: List[Tuple[float, int, str]] = [
        (calc_hotspot_score_for_file(file, today), loc, file)
        for file, loc in files_with_loc
        if loc > 0
    ]
    result = [(score, loc, file) for score, loc, file in result]
    if len(result) == 0:
        return

    min_score = min(score for score, _, _ in result)
    max_score = max(score for score, _, _ in result)
    result = [
        (
            normalize_score(score, min_score, max_score),
            loc,
            file,
        )
        for score, loc, file in result
    ]
    result.sort(key=lambda x: x[1], reverse=True)
    result.sort(key=lambda x: x[0], reverse=True)

    max_score_length = max(len(f"{score:.{digits}f}") for score, _, _ in result)
    max_loc_length = max(len(str(loc)) for _, loc, _ in result)
    print(
        delimiter.join(
            [f"{'score':>{max_score_length}}", f"{'loc':>{max_loc_length}}", "filename"]
        )
    )
    for score, loc, file in result:
        print(
            delimiter.join([f"{score:>.{digits}f}", f"{loc:>{max_loc_length}}", file])
        )


main()
